% ver0 Info
% 1. Fixed speed value
% 2. Generate 3 random positions of triangles 
%    (1 equilateral triangle, 1 isosceles, 1 regular)
% 3. Geometry : x-axis 0~2, y-axis 0~0.5
% 4. save : ux, uy, pressure, subd, solve

% argument setting
cOptDef = {   ...
    'width',     3; % length of x-axis
    'height',    1.5; % length of y-axis
    'Ux_path',  'Dataset/Ux/';
    'Uy_path',   'Dataset/Uy/';
    'P_path',    'Dataset/Pressure/';
    'Solve_path', 'Dataset/Solve/';
    'Subd_path', 'Dataset/Subd/';
    };

% opt has value of argument setting
[got,opt] = parseopt(cOptDef);

for step = 1:1:1

    clf('reset')
    clearvars -except step opt
    
    % set velocity
    Ux_Velocity = 2; 
    Ux_Velocity_str = string(Ux_Velocity);
    Uy_Velocity = 0; 
    Uy_Velocity_str = string(Uy_Velocity);

    % set saved name
    save_name_temp = strcat(int2str(step),"_ux_"); % 0_ux_
    save_name_temp = strcat(save_name_temp,Ux_Velocity_str); % 0_ux_값
    save_name_temp = strcat(save_name_temp,"_uy_"); % 0_ux_값_uy_
    save_name = strcat(save_name_temp,Uy_Velocity_str); % 0_ux_값_uy_값

    % feature setting
    fea.sdim = { 'x', 'y' };
    fea = addphys( fea, @navierstokes, { 'u', 'v', 'p' } );
    gobj = gobj_rectangle( 0, opt.width, 0, opt.height, 'R1');

    % geometry
    x_lim = [0, opt.width];
    y_lim = [0, opt.height];
    
    % setting of obstacle
    min_distance = 0.25; % minimum distance among triangle
    size_factor = 0.2;  % size factor to obstacle
    existing_offsets = []; % array of existing obstacle
    
    % generate obstcle 1: equilateral
    offset1 = generate_random_offset(existing_offsets, min_distance, size_factor, x_lim, y_lim);
    existing_offsets = [existing_offsets; offset1];
    triangle1 = generate_triangle('equilateral', x_lim, y_lim, offset1, size_factor)'
    
    % generate obstcle 2: isosceles
    offset2 = generate_random_offset(existing_offsets, min_distance, size_factor, x_lim, y_lim);
    existing_offsets = [existing_offsets; offset2];
    triangle2 = generate_triangle('isosceles', x_lim, y_lim, offset2, size_factor)'
    
    % generate obstcle 3: regular
    offset3 = generate_random_offset(existing_offsets, min_distance, size_factor, x_lim, y_lim);
    existing_offsets = [existing_offsets; offset3];
    triangle3 = generate_triangle('scalene', x_lim, y_lim, offset3, size_factor)'

    % final geometry
    fea = geom_add_gobj( fea, gobj );
    gobj = gobj_polygon( triangle1, 'P1');
    fea = geom_add_gobj( fea, gobj );
    gobj = gobj_polygon( triangle2, 'P2');
    fea = geom_add_gobj( fea, gobj );
    gobj = gobj_polygon( triangle3, 'P3');
    fea = geom_add_gobj( fea, gobj );
    fea.geom = geom_apply_formula( fea.geom, 'R1-P3-P2-P1');

    % grid and refine
    fea.grid = gridgen( fea, 'gridgen', 'default', 'hmax', 0.075, 'grading', 0.3 );
    fea = gridrefine( fea );
    fea = gridrefine( fea );

    %% Equation settings
    fea.phys.ns.dvar = { 'u', 'v', 'p' };
    fea.phys.ns.sfun = { 'sflag1', 'sflag1', 'sflag1' };
    fea.phys.ns.eqn.coef = { 'rho_ns', 'rho', 'Density', { '1' };
                             'miu_ns', 'mu', 'Viscosity', { '1' };
                             'Fx_ns', 'F_x', 'Volume force in x-direction', { '0' };
                             'Fy_ns', 'F_y', 'Volume force in y-direction', { '0' };
                             'u0_ns', 'u_0', 'Initial condition for u', { '0' };
                             'v0_ns', 'v_0', 'Initial condition for v', { '0' };
                             'p0_ns', 'p_0', 'Initial condition for p', { '0' };
                             'miuT_ns', [], 'Turbulent viscosity', { 0 } };
    fea.phys.ns.eqn.sdiff = { ' - (miu_ns+miuT_ns)*(2*ux_x + uy_y + vx_y)', ' - (miu_ns+miuT_ns)*(vx_x + uy_x + 2*vy_y)', [] };
    fea.phys.ns.eqn.sconv = { 'rho_ns*(u*ux_t + v*uy_t)', 'rho_ns*(u*vx_t + v*vy_t)', [] };
    fea.phys.ns.eqn.seqn = { 'rho_ns*u'' - (miu_ns+miuT_ns)*(2*ux_x + uy_y + vx_y) + rho_ns*(u*ux_t + v*uy_t) + p_x = Fx_ns', 'rho_ns*v'' - (miu_ns+miuT_ns)*(vx_x + uy_x + 2*vy_y) + rho_ns*(u*vx_t + v*vy_t) + p_y = Fy_ns', 'ux_t + vy_t = 0' };
    fea.phys.ns.eqn.vars = { 'Velocity field', 'sqrt(u^2+v^2)';
                             'x-velocity', 'u';
                             'y-velocity', 'v';
                             'Pressure', 'p';
                             'Vorticity', 'vx-uy';
                             'Velocity field', { 'u', 'v' } };
    fea.phys.ns.prop.isaxi = 0;
    fea.phys.ns.prop.artstab.id = 0;
    fea.phys.ns.prop.artstab.id_coef = 0.5;
    fea.phys.ns.prop.artstab.sd = 0;
    fea.phys.ns.prop.artstab.sd_coef = 0.25;
    fea.phys.ns.prop.artstab.ps = 1;
    fea.phys.ns.prop.artstab.ps_coef = 1;
    fea.phys.ns.prop.artstab.iupw = 0;
    fea.phys.ns.prop.turb.model = 'laminar';
    fea.phys.ns.prop.turb.wallf = 1;
    fea.phys.ns.prop.turb.inlet = [];
    fea.phys.ns.prop.active = [ 1;
                                1;
                                1 ];
    fea.phys.ns.prop.intb = 0;
    
    %% Boundary settings
    fea.phys.ns.bdr.sel = [ 1, 4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 ];
    fea.phys.ns.bdr.coef = { 'bw_ns', 'u = 0', 'Wall/no-slip', [], { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                             'bv_ns', 'u = u_0', 'Inlet/velocity', { 'u_0';
                             'v_0';
                             [] }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 0, 0, 0, Ux_Velocity, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, Uy_Velocity, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                             'bn_ns', '-n.(-pI + mu(grad u+grad uT)) = 0', 'Neutral outflow/stress boundary', [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                             'bp_ns', 'p = p_0', 'Outflow/pressure', { [];
                             [];
                             'p_0' }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { { '-p*nx';
                             '-p*ny';
                             '0' };
                             [] }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, '0', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                             'bs_ns', 'n&.u = 0, -n.(-pI + mu(grad u+grad uT)).t = 0', 'Symmetry/slip', [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip', 'solve_hook_bdrslip';
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    fea.phys.ns.bdr.coefi = { 'bcic_ns', 'n.(F_1-F_2) = 0, F_i=-p_iI + mu_i(grad u_i+grad u_iT)', 'Continuity', [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                              'bcij_ns', 'u = u_0', 'Prescribed velocity', { 'u_0';
                              'v_0';
                              [] }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                              'bcir_ns', 'p = p_0', 'Prescribed pressure', { [];
                              [];
                              'p_0' }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, [], { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
                              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } };
    fea.phys.ns.bdr.vars = { 'Viscous force, x-component', '(miu_ns+miuT_ns)*(2*nx*ux+ny*(uy+vx))';
                             'Viscous force, y-component', '(miu_ns+miuT_ns)*(nx*(vx+uy)+2*ny*vy)';
                             'Total force, x-component', '-nx*p+(miu_ns+miuT_ns)*(2*nx*ux+ny*(uy+vx))';
                             'Total force, y-component', '-ny*p+(miu_ns+miuT_ns)*(nx*(vx+uy)+2*ny*vy)' };
    fea.phys.ns.prop.intb = 0;
    
    %% Solver
    fea = parsephys( fea );
    fea = parseprob( fea );
    
    fea.sol.u = solvestat( fea, ...
                           'iupw', [ 0, 0, 0 ], ...
                           'linsolv', 'backslash', ...
                           'icub', 'auto', ...
                           'nlrlx', 1, ...
                           'toldef', 1e-06, ...
                           'tolchg', 1e-06, ...
                           'reldef', 0, ...
                           'relchg', 1, ...
                           'maxnit', 20, ...
                           'hook', [], ...
                           'nproc', 4, ...
                           'init', { 'u0_ns', 'v0_ns', 'p0_ns' }, ...
                           'solcomp', [ 1; 1; 1 ] );

    % save image (ux)
    clf('reset');
    img = postplot( fea, ...
              'surfexpr', 'u', ...
              'axis','off',...
              'colorbar','off',...
              'solnum', 1 );
    %               'caxis',[0 6],...
    image = gca;
    ux_save_path = strcat(opt.Ux_path,save_name);
    ux_save_path = strcat(ux_save_path,'.jpg');
    exportgraphics(image, ux_save_path,'Resolution',71);
    
    % save image (uy)
    clf('reset');
    postplot( fea, ...
              'surfexpr', 'v', ...
              'axis','off',...
              'colorbar','off',... 
              'solnum', 1 );
              %               'caxis',[-10 10],...
    image = gca;
    uy_save_path = strcat(opt.Uy_path,save_name);
    uy_save_path = strcat(uy_save_path,'.jpg');
    exportgraphics(image, uy_save_path,'Resolution',71);
    
    % save image (pressure)
    clf('reset');
    postplot( fea, ...
              'surfexpr', 'p', ...
              'axis','off',...
              'colorbar','off',...
              'solnum', 1 );
    %               'caxis',[-500 5000],...
    image = gca;
    pressure_save_path = strcat(opt.P_path,save_name);
    pressure_save_path = strcat(pressure_save_path,'.jpg');
    exportgraphics(image, pressure_save_path,'Resolution',71);
    
    % save subd
    clf('reset');
    plotsubd(fea,...
             'labels', 'off');
    image = gcf;
    subd_path = strcat(opt.Subd_path,save_name);
    subd_path = strcat(subd_path,'.jpg');
    exportgraphics(image,subd_path);

    % save solved file 
    columns = {'x', 'y', 'ux', 'uy', 'p'};
    uxuyp = reshape(fea.sol.u, [], 3);
    table = [fea.grid.p' uxuyp];
    output = array2table(table, 'VariableNames', columns);
    solve_path = strcat(opt.Solve_path,save_name);
    solve_path = strcat(solve_path,'.csv');
    writetable(output,solve_path,'Delimiter', ',','QuoteStrings',true);
  
end

function offset = generate_random_offset(existing_offsets, min_distance, size_factor, x_lim, y_lim)
    is_valid = false;
    while ~is_valid
        % x, y 좌표 랜덤 생성 (삼각형이 사각형 틀을 넘지 않도록 경계를 고려)
        x_center = (x_lim(2) - x_lim(1) - 2*size_factor) * rand() + x_lim(1) + size_factor;
        y_center = (y_lim(2) - y_lim(1) - 2*size_factor) * rand() + y_lim(1) + size_factor;
        offset = [x_center, y_center];
        
        % 기존 삼각형들과 겹치는지 확인
        is_valid = true;
        for i = 1:size(existing_offsets, 1)
            distance = norm(offset - existing_offsets(i, :));
            if distance < min_distance
                is_valid = false;
                break;
            end
        end
    end
end


function triangle = generate_triangle(type, x_lim, y_lim, offset, size_factor)
    % 기본 offset을 받아서 각 삼각형이 겹치지 않도록 함.
    x_center = offset(1);  % 주어진 offset을 x 중심으로 사용
    y_center = offset(2);  % 주어진 offset을 y 중심으로 사용
    
    switch type
        case 'equilateral'  % 정삼각형
            theta = (0:2) * (2*pi/3);  % 각도
            x = x_center + size_factor * cos(theta);
            y = y_center + size_factor * sin(theta);
        case 'isosceles'  % 이등변삼각형
            x = [x_center - size_factor, x_center + size_factor, x_center];
            y = [y_center - size_factor/2, y_center - size_factor/2, y_center + size_factor];
        case 'scalene'  % 일반 삼각형
            x = x_center + size_factor * [0, 0.8, 0.5];
            y = y_center + size_factor * [0, 0.2, 1.2];
    end
    
    % 삼각형 닫기 (첫 번째 점을 마지막에 추가)
    triangle = [x; y];
    triangle = [triangle, triangle(:,1)];
end

